# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By
# //Copperforge
# This file is distributed under the same license as the Game Manual 0
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0.1.1-269-g028ca04\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-03 23:20-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/docs/software/mecanum-drive.rst:2
msgid "Programming Tutorial - Mecanum Drivetrain"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:5
msgid "Mecanum Physics"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:7
msgid ""
":term:`Mecanum drive <Mecanum Wheel>` is a very popular drive train in "
"FTC. Mecanum drive enables holonomic movement. This means that the "
"drivetrain is able move in any direction while rotating: forwards, "
"backwards, side to side, translating while rotating, etc. `Here is a neat"
" video <https://www.youtube.com/watch?v=pP8ajNMx84k>`_ demonstrating such"
" movement."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:9
msgid ""
":term:`Mecanum wheels <Mecanum Wheel>` have rollers at a 45° angle to the"
" rest of the wheel. Since these are in contact with the ground instead of"
" something solid like in a :term:`traction wheel <Traction wheel>`, "
"instead of the wheel creating a force parallel to the orientation of the "
"wheel, it creates one 45° from parallel. Depending on how the wheels are "
"driven, X or Y components of the force vectors can cancel which allows "
"movement in any direction."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:15
msgid "Using Vectoring to Create Omnidirectional Movement"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:17
msgid ""
"A standard mecanum drive configuration possesses 4 mecanum wheels "
"oriented in an \"X\" shape. This means that the rollers are angled "
"towards the center when looking at it from above. This configuration "
"allows one to add up the force vectors generated by the offset rollers "
"and derive movement in any direction. It is important to note that "
"because of friction, perfect movement isn’t possible in every direction, "
"so a :term:`mecanum drivetrain <Mecanum Wheel>` will be able to drive "
"slightly faster forwards/backwards than any other directions. Combining "
"translation and rotation will also result in slower movement."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:22
msgid ""
"In the image above, vectors 1, 2, 3, and 4 are the force vectors created "
"by the :term:`mecanum wheels <Mecanum Wheel>` when the chassis is "
"instructed to drive towards the top of the image. All motors are driving "
"forward. The blue and red lines are their X and Y components, "
"respectively. Here are a few examples of how the wheels must be driven to"
" achieve different movements:"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:28
msgid ""
"It is strongly advised to not hardcode these movements in; there is a "
"much better way described below that allows for true holonomic movement "
"and is much more elegant."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:31
msgid "Deriving Mecanum Control Equations"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:33
msgid ""
"Before thinking about mecanum, envision a scenario where you have a 2 "
"motor tank drivetrain which you want to control using the left stick Y "
"axis for forward/backward movement, and the right stick X axis for pivot "
"turning. The motors are configured so that positive is clockwise for the "
"right motor when the body is facing away from you, and the left motor is "
"the opposite. To control only forward/backward movement, you simply need "
"to set the motor powers to the Y stick value (flip the sign since Y is "
"reversed):"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst
msgid "Java"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst
msgid "Blocks"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:55
msgid ""
"Although at first adding rotation might seem like a difficult task, it’s "
"actually super simple. All you need to do is subtract the x value from "
"the right side, and add it to the left:"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:77
msgid ""
"Here, if the Y stick is pressed upwards, both of the motors will be fed a"
" positive value, causing the robot to move forward. If it is pressed "
"downwards, both of the motors will be fed a negative value, causing the "
"robot to move backwards. A similar principle applies for rotation: if the"
" X stick is pushed rightward, the left wheels will spin forward while the"
" right spin backward, causing rotation. The opposite applies for pushing "
"the stick left. If both sticks are pushed at the same time, say the Y "
"stick is at 1 and the X stick is also at 1, the value of the left wheels "
"will be :math:`1+1=2` (which gets clipped to 1 in the SDK) and the right "
"wheels will be :math:`1-1=0`, which causes a rightward curve."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:79
msgid ""
"Applying omnidirectional movement with :term:`mecanum wheels <Mecanum "
"Wheel>` operates under the same principle as adding turning into the tank"
" example. The left stick X values will be added or subtracted to each "
"wheel depending on how that wheel needs to rotate to get the desired "
"movement. The only difference between adding turning is that rather than "
"wheels on the same side being the same sign, wheels diagonal to each "
"other will be the same sign."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:81
msgid ""
"We want a positive X value to correlate to rightward strafing. If we "
"refer back to the vectoring image, this means that the front left and "
"back right need to rotate forward, while the back left and front right "
"need to rotate backwards. So, we should add the x value to the front left"
" and back right and subtract it from the back right and front left:"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:105
msgid ""
"Motors in FTC spin counterclockwise when given positive power by default "
"(except for NeveRest motors). In this case, you need to reverse the "
"direction of the right drive motors so that they spin toward the same "
"direction as the left drive motors when supplied with a positive power "
"(for a drivetrain using NeveRests, reverse the right side instead). This "
"can be done with :code:`DcMotor.setDirection(DcMotor.Direction.REVERSE)`."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:107
msgid ""
"This is the same as the tank example, except now with 4 motors and the "
"strafing component added. Similarly to the tank example, the Y component "
"is added to all wheels, and the right x (rx) is added to the left and "
"subtracted from the right. Now, we have added another component that will"
" allow us to strafe rightward. In doing that, however, we have actually "
"allowed for strafing in any direction. If you think about it, pressing "
"the joystick to the left will do the same thing in reverse, which is what"
" is needed to strafe left. If it is pressed at 45 degrees, the x and y "
"components of the joystick will be equal. This will cause two diagonal "
"motors to cancel, allowing for diagonal movement. This same effect "
"applies to every angle of the joystick."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:109
msgid ""
"Now that we have a functioning mecanum driving program, there are a few "
"things that can be done to clean it up. The first of these would be "
"multiplying the left X value by something to counteract imperfect "
"strafing. Doing this will make the drive feel more accurate on non axis "
"aligned directions, and make field centric driving more accurate. In this"
" tutorial, we will use 1.1, but it’s really up to driver preference."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:128
msgid ""
"The other improvement we can make is scale the values into the range of "
"-1 to 1."
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:130
msgid ""
"Since the SDK simply clips (limits) the powers to that range, we can lose"
" the ratio we are looking for unless we proactively put all the numbers "
"back in that range while still maintaining our calculated ratio. For "
"example, if we calculate values of 0.4, 0.1, 1.1, and 1.4, they will be "
"clipped to 0.4, 0.1, 1.0, and 1.0, which is not the same ratio. Instead, "
"we need to divide all of them by the largest power's absolute value when "
"it exceeds 1:"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:155
msgid ""
"Make sure to set the powers on your motor and update this every loop in "
"an opmode!"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:158
msgid "Final Sample Code"
msgstr ""

#: ../../source/docs/software/mecanum-drive.rst:220
msgid ":download:`Blocks file download <mecanum-drive-sample.blk>`"
msgstr ""

