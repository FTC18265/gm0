# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By
# //Copperforge
# This file is distributed under the same license as the Game Manual 0
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0.1.1-269-g028ca04\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-03 23:20-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/docs/software/odometry.rst:4
msgid "Odometry"
msgstr ""

#: ../../source/docs/software/odometry.rst:6
msgid ""
"Odometry is a form of localization that uses data from sensors like "
"encoders to derive an estimated position relative to a starting point. "
"Localization is a means for being able to locate the position of the bot "
"at some point in time. Odometry is especially useful in autonomous "
"programs because it allows for easier implementation of different tasks "
"on the field due to understanding one's position."
msgstr ""

#: ../../source/docs/software/odometry.rst:9
msgid "Pose"
msgstr ""

#: ../../source/docs/software/odometry.rst:11
msgid ""
"We refer to pose, which is the position of some body (like a bot), "
"normally in the context two-dimensional space, as the movement of the "
"robot is generally constrained to a single plane. We notate the robot's "
"pose as :math:`\\vec{x}`. A pose contains two entries: the robot's "
"position and heading; position is generally in Cartesian coordinates, so "
"the pose can be represented with :math:`x`, :math:`y`, and "
":math:`\\theta`. A \"heading\" is a term for the direction towards which "
"the front of the robot is facing. Because of this, the robot's coordinate"
" frame is set up such that the global x-axis is lined up with the 0 "
"heading."
msgstr ""

#: ../../source/docs/software/odometry.rst:18
msgid ""
"`Road Runner Coordinate Frame Documentation <https://acme-"
"robotics.gitbook.io/road-runner/tour/coordinate-frame>`_"
msgstr ""

#: ../../source/docs/software/odometry.rst:20
msgid ""
"We can refer to the current pose (:math:`\\vec{x}_0`) of the robot as "
":math:`\\begin{pmatrix} x_0 \\\\ y_0 \\\\ \\theta_0 \\end{pmatrix}`. This"
" is just fancy notation for a point on the field :math:`(x_0, y_0)` with "
"a specified orientation of the robot--the heading :math:`\\theta_0`. A "
"pose generally has some beginning origin in the coordinate frame."
msgstr ""

#: ../../source/docs/software/odometry.rst:23
msgid "Updating the Pose"
msgstr ""

#: ../../source/docs/software/odometry.rst:25
msgid ""
"The change in pose over some very small amount of time is :math:`\\Delta "
"\\vec{x}`. The difference in time between the current pose and the last "
"pose should be as small as possible to improve the approximations for the"
" math. Teams should update their robot pose every cycle of their control "
"loop."
msgstr ""

#: ../../source/docs/software/odometry.rst:27
msgid ""
"Updating the pose is as simple as adding the transformed change to the "
"previous pose where :math:`\\varphi = \\Delta\\theta`"
msgstr ""

#: ../../source/docs/software/odometry.rst:29
msgid ""
"\\begin{pmatrix}\n"
"   x \\\\\n"
"   y \\\\\n"
"   \\theta\n"
"\\end{pmatrix} =\n"
"\\begin{pmatrix}\n"
"   x_0 \\\\\n"
"   y_0\\\\\n"
"   \\theta_0\n"
"\\end{pmatrix} +\n"
"\\begin{pmatrix}\n"
"   \\Delta x \\\\\n"
"   \\Delta y \\\\\n"
"   \\varphi\n"
"\\end{pmatrix}"
msgstr ""

#: ../../source/docs/software/odometry.rst:47
msgid ""
"The idea of odometry is to use sensor data and math to form an "
"approximation for the robot's pose over time."
msgstr ""

#: ../../source/docs/software/odometry.rst:50
msgid "Finding the Change in Position"
msgstr ""

#: ../../source/docs/software/odometry.rst:52
msgid ""
"In order to determine the current location of the robot and update its "
"pose, the change must be calculated using data read from the sensors. For"
" a robot, there will be three possible sensors that you can use: two that"
" are parallel with the robot's body in the :math:`x`-direction and one "
"that is aligned with the :math:`y`-direction of movement (perpendicular "
"to the drive wheels)."
msgstr ""

#: ../../source/docs/software/odometry.rst:55
msgid "Angle and Displacement"
msgstr ""

#: ../../source/docs/software/odometry.rst:57
msgid ""
"The displacement (or change in position) of the left sensor is "
":math:`\\Delta x_l` and the displacement of the right sensor is "
":math:`\\Delta x_r`. The lateral distance between these two sensors is "
"called the trackwidth, notated as :math:`L`. This is very important for "
"determining angle for turning approximations. This value will need to be "
"tuned, which means tested repeatedly and then brought to some converging "
"value that is close to the actual measurement."
msgstr ""

#: ../../source/docs/software/odometry.rst:62
msgid ""
"`17508 Rising Tau's 2019/20 Skystone Bot <https://learnroadrunner.com"
"/dead-wheels.html#three-wheel-odometry>`_"
msgstr ""

#: ../../source/docs/software/odometry.rst:64
msgid "Deriving the value of :math:`\\varphi` then becomes simple:"
msgstr ""

#: ../../source/docs/software/odometry.rst:66
msgid ""
"\\varphi = \\frac{\\Delta x_l - \\Delta x_r}{L}\n"
"\n"
msgstr ""

#: ../../source/docs/software/odometry.rst:68
msgid ""
"To perform later calculations, we need to know the displacement of the "
"robot in the x-direction relative to its center rather than the two "
"parallel sensors. To do this, we take the average to derive "
":math:`\\Delta x_c`, or the center displacement:"
msgstr ""

#: ../../source/docs/software/odometry.rst:70
msgid ""
"\\Delta x_c = \\frac{\\Delta x_l + \\Delta x_r}{2}\n"
"\n"
msgstr ""

#: ../../source/docs/software/odometry.rst:72
msgid ""
"The final displacement we need before we can determine the change in pose"
" is the horizontal displacement :math:`\\Delta x_\\perp`. This is the "
"displacement of the perpendicular sensor :math:`\\Delta x_h` with a "
"correction for forward offset :math:`F`. In order to get accurate "
"approximations, the forward offset needs to be considered. When the "
"sensor is closer to the back, the offset is negative, but when it is "
"closer to the front, it is positive. This is to account for the change in"
" its position based on point-turns."
msgstr ""

#: ../../source/docs/software/odometry.rst:74
msgid "As a result of this, we can define our horizontal displacement as:"
msgstr ""

#: ../../source/docs/software/odometry.rst:76
msgid ""
"\\Delta x_\\perp = \\Delta x_h - (F * \\varphi)\n"
"\n"
msgstr ""

#: ../../source/docs/software/odometry.rst:80
msgid ""
"If you do not have perpendicular sensors, which are not required if the "
"robot cannot move in the lateral direction, :math:`\\Delta x_\\perp` is "
"not necessary."
msgstr ""

#: ../../source/docs/software/odometry.rst:82
msgid "For this value, use 0 if you do not have a horizontal sensor."
msgstr ""

#: ../../source/docs/software/odometry.rst:85
msgid "Robot-Relative Deltas"
msgstr ""

#: ../../source/docs/software/odometry.rst:87
msgid ""
"Let's come up with a simplified, nonoptimal way to calculate our robot-"
"relative pose deltas which we can then transform into field-relative "
"coordinate changes. To perform this we need to transform the robot-"
"relative deltas via a rotation matrix where we rotate the relative pose "
"difference by the original heading. We can derive the values of "
":math:`\\Delta x` and :math:`\\Delta y`."
msgstr ""

#: ../../source/docs/software/odometry.rst:89
msgid ""
"\\begin{pmatrix}\n"
"   \\Delta x \\\\\n"
"   \\Delta y \\\\\n"
"   \\varphi\n"
"\\end{pmatrix} =\n"
"\\begin{pmatrix}\n"
"   \\cos(\\theta_0)&-\\sin(\\theta_0)&0\\\\\n"
"   \\sin(\\theta_0)&\\cos(\\theta_0)&0\\\\\n"
"   0&0&1\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"   \\Delta x_c\\\\\n"
"   \\Delta x_\\perp\\\\\n"
"   \\varphi\n"
"\\end{pmatrix}"
msgstr ""

#: ../../source/docs/software/odometry.rst:106
msgid "From this, we can calculate our field-relative change in pose:"
msgstr ""

#: ../../source/docs/software/odometry.rst:108
msgid ""
"\\begin{pmatrix}\n"
"   \\Delta x \\\\\n"
"   \\Delta y \\\\\n"
"   \\varphi\n"
"\\end{pmatrix} =\n"
"\\begin{pmatrix}\n"
"   \\Delta x_c \\cos(\\theta_0) - \\Delta x_\\perp \\sin(\\theta_0) \\\\\n"
"   \\Delta x_c \\sin(\\theta_0) + \\Delta x_\\perp \\cos(\\theta_0)\\\\\n"
"   \\varphi\n"
"\\end{pmatrix}"
msgstr ""

#: ../../source/docs/software/odometry.rst:121
msgid ""
"This method of approximating position is known as Euler integration, but "
"we are using it for strict pose deltas instead of integrating the "
"velocity (essentially, this is a very simplified version of the original "
"theory)."
msgstr ""

#: ../../source/docs/software/odometry.rst:123
msgid ""
"This is for advanced programmers; while implementing this from scratch is"
" a great learning exercise, it is likely not the optimal way to get the "
"best auto. There are several `resources <#resources-for-odometry>`_ out "
"there for producing great, well-tested, and easy-to-implement odometry."
msgstr ""

#: ../../source/docs/software/odometry.rst:126
msgid "Odometry Pseudocode"
msgstr ""

#: ../../source/docs/software/odometry.rst:151
msgid "Using Pose Exponentials"
msgstr ""

#: ../../source/docs/software/odometry.rst:153
msgid ""
"This method uses differential equations to solve the nonlinear position "
"of the robot given constant curvature. Euler integration assumes that the"
" robot follows a straight path between updates, which can lead to "
"inaccurate approximations when traveling around curves. If you are "
"interested in the math itself, we recommend you check out `this book "
"<https://file.tavsys.net/control/controls-engineering-in-frc.pdf>`_ for "
"FRC\\ |reg| controls."
msgstr ""

#: ../../source/docs/software/odometry.rst:155
msgid ""
"We'll treat the way it is solved in this page as a black box, and derive "
"the formula by implementing a correction for this nonlinear curvature "
"into our Euler integration robot-relative deltas equation:"
msgstr ""

#: ../../source/docs/software/odometry.rst:157
msgid ""
"\\begin{pmatrix}\n"
"\\Delta x \\\\ \\Delta y \\\\ \\varphi\n"
"\\end{pmatrix} =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta_0)&-\\sin(\\theta_0)&0\\\\\n"
"\\sin(\\theta_0)&\\cos(\\theta_0)&0\\\\\n"
"0&0&1\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"\\frac{\\sin(\\varphi)}{\\varphi}&\\frac{\\cos(\\varphi)-1}{\\varphi}&0\\\\"
"\n"
"\\frac{1-\\cos(\\varphi)}{\\varphi}&\\frac{\\sin(\\varphi)}{\\varphi}&0\\\\"
"\n"
"0&0&1\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"\\Delta x_c\\\\ \\Delta x_\\perp\\\\ \\varphi\n"
"\\end{pmatrix}"
msgstr ""

#: ../../source/docs/software/odometry.rst:175
msgid "Resources for Odometry"
msgstr ""

#: ../../source/docs/software/odometry.rst:177
msgid ""
"There are several great resources out there for odometry. We highly "
"recommend `Road Runner <https://acme-robotics.gitbook.io/road-runner/>`_."
" For the math behind Road Runner (which utilizes pose exponentials), you "
"can also read `Ryan's paper <https://github.com/acmerobotics/road-"
"runner/blob/master/doc/pdf/Mobile_Robot_Kinematics_for_FTC.pdf>`_. An "
"additional resource for Road Runner is `Learn Road Runner "
"<https://learnroadrunner.com/>`_ which is a step-by-step procedural guide"
" that explains how to work with the `Road Runner quickstart "
"<https://github.com/acmerobotics/road-runner-quickstart>`_."
msgstr ""

#: ../../source/docs/software/odometry.rst:179
msgid ""
"We also recommend `Tyler's book <https://file.tavsys.net/control"
"/controls-engineering-in-frc.pdf>`_ as it goes into great detail about "
"various controls in *FIRST*\\ |reg| robotics."
msgstr ""

#: ../../source/docs/software/odometry.rst:181
msgid ""
"If you're using other resources, it is important that you do not use ones"
" that utilize Euler integration as it is less optimal for real life "
"approximations of robot pose."
msgstr ""

