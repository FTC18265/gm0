# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By
# //Copperforge
# This file is distributed under the same license as the Game Manual 0
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0.1.1-269-g028ca04\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-03 23:20-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/docs/software/control-loops.rst:4
msgid "Control Loops"
msgstr ""

#: ../../source/docs/software/control-loops.rst:6
msgid ""
"Control loops are software used to operate power transmission systems "
"(such as a drivetrain or linear slide) in a fast and controlled fashion. "
"Not only do control loops let you run mechanisms quickly without fear of "
"losing control, in many cases, they help preserve the longevity of "
"mechanisms by reducing rapid change of applied motor voltage."
msgstr ""

#: ../../source/docs/software/control-loops.rst:9
msgid "What is Error?"
msgstr ""

#: ../../source/docs/software/control-loops.rst:11
msgid ""
"The first thing that must be defined when discussing control loops is the"
" concept of error."
msgstr ""

#: ../../source/docs/software/control-loops.rst:13
msgid ""
"Error is defined as the difference between where you are and where you "
"want to be. For instance, say you tell your drivetrain to drive at 30 "
"inches per second, but in actuality, at a time, the drivetrain is driving"
" at 28 inches per second. Since :math:`30-28=2`, the error of the "
"drivetrain’s speed at this time :math:`T` is 2 inches per second. In "
"other words, at a time :math:`t=T`, :math:`e(t)=2`."
msgstr ""

#: ../../source/docs/software/control-loops.rst:16
msgid "PID"
msgstr ""

#: ../../source/docs/software/control-loops.rst:18
msgid ""
"A PID controller (or Proportional Integral Derivative controller) is a "
"control loop that solely uses error to control the system. PID is a form "
"of a **feedback control loop**, or **closed loop control**. This means "
"that data about the variable you are controlling is required in order for"
" the loop to control that variable. In this case, information about the "
"**error** of the system is required to control the system with a PID "
"controller."
msgstr ""

#: ../../source/docs/software/control-loops.rst:21
msgid "The Optional Calculus"
msgstr ""

#: ../../source/docs/software/control-loops.rst:23
msgid ""
"The following equation represents the rigorous mathematical definition of"
" the output of a PID controller :math:`f` at any given time :math:`t`:"
msgstr ""

#: ../../source/docs/software/control-loops.rst:25
msgid ""
"f(t) = K_p e(t) + K_i \\int_o^t e(t) \\mathrm{d}t + K_d "
"\\frac{\\mathrm{d}e(t)}{\\mathrm{d}t}\n"
"\n"
msgstr ""

#: ../../source/docs/software/control-loops.rst:27
msgid ""
"where :math:`K_p`, :math:`K_i`, and :math:`K_d` are constants and "
":math:`e(t)`, as previously mentioned, is the error in the system."
msgstr ""

#: ../../source/docs/software/control-loops.rst:29
msgid ""
"If you have no experience with calculus, don’t worry; while PID is "
"fundamentally rooted in calculus, you do not need any calculus experience"
" to be able to understand it, only basic algebra. However, you are still "
"urged to read the rest of the section regardless of calculus experience, "
"as the formula alone doesn’t tell you why it works."
msgstr ""

#: ../../source/docs/software/control-loops.rst:32
msgid "Simplification of the PID formula"
msgstr ""

#: ../../source/docs/software/control-loops.rst:34
msgid ""
"Here is a simplified version of the PID formula: :math:`f(t)=K_p P(t)+K_i"
" I(t)+K_d D(t)`"
msgstr ""

#: ../../source/docs/software/control-loops.rst:36
msgid ""
"All we have done is simply take the full formula and replaced part of the"
" terms with functions: :math:`P(t)`, :math:`I(t)`, and :math:`D(t)`."
msgstr ""

#: ../../source/docs/software/control-loops.rst:39
msgid "The Proportional Term"
msgstr ""

#: ../../source/docs/software/control-loops.rst:41
msgid ""
"The first component of the function, :math:`K_p P(t)`, is by far the most"
" simple and easy to understand, as :math:`P(t) = e(t)`. For the sake of "
"example, let’s pretend that :math:`K_i=0` and :math:`K_d=0` (a PID "
"controller with only a proportional constant is known as a **P "
"controller**). How will the system behave? Well, if the error is large, "
"the output will be large. Likewise, if the error is small, the output "
"will be small. Also, ideally, given enough time, the system always "
"approaches its destination, assuming :math:`K_p` is of the correct sign."
msgstr ""

#: ../../source/docs/software/control-loops.rst:43
msgid ""
"Say we apply this to a drivetrain. You want to drive a distance "
":math:`D`, and you decide to set your motor powers using a P controller "
"to accomplish this. In this case, your error is how far away the robot is"
" from the desired location. As you start to drive forward, your error is "
"large, so you drive forward quickly, which is desirable. After all, you "
"aren’t concerned with overshooting the target yet if you are far away "
"from it."
msgstr ""

#: ../../source/docs/software/control-loops.rst:45
msgid ""
"But as the robot’s distance to the target approaches 0, you will start to"
" slow down, gaining more control over the robot. Once the error is zero, "
"ideally, the robot will stop, and you have reached your destination. If "
"you happen to overshoot, the error will become negative, and the robot "
"will backtrack, repeating the process."
msgstr ""

#: ../../source/docs/software/control-loops.rst:48
msgid "The Derivative Term"
msgstr ""

#: ../../source/docs/software/control-loops.rst:50
msgid ""
"This term, :math:`K_d D(t)`, is intended to dampen the rate of change of "
"the error. In other words, it tries to keep the error constant. How is "
"this done?"
msgstr ""

#: ../../source/docs/software/control-loops.rst:52
msgid ""
"Well, for those of you with calculus under your belt, "
":math:`D(t)=\\frac{de(t)}{dt}`. For those without calculus experience, it"
" represents how fast the error is changing. Graphically, :math:`D(t)` is "
"simply the slope of the error at any given time :math:`t`."
msgstr ""

#: ../../source/docs/software/control-loops.rst:54
msgid ""
"This slope can be calculated by keeping track of the error over "
"successive iterations of the control loop. One iteration occurs at time "
":math:`t_n` with an error of :math:`e(t_n)`. At the next iteration, the "
"time is :math:`t_{n+1}` with an error of :math:`e(t_{n+1})`. Thus, to "
"find :math:`D(t)`, simply find the slope of :math:`e(t)` given these two "
"points."
msgstr ""

#: ../../source/docs/software/control-loops.rst:57
msgid "The Integral Term"
msgstr ""

#: ../../source/docs/software/control-loops.rst:59
msgid ""
"Admittedly, the integral term is the least important term for FTC PID "
"control loops. With a properly tuned :math:`K_p` and :math:`K_d`, you "
"often can just set :math:`K_i` to 0 and call it a day."
msgstr ""

#: ../../source/docs/software/control-loops.rst:61
msgid ""
"However, it can still be useful in some cases. Just like the derivative "
"term, the integral term intends to correct for overshoot. if the system "
"thinks it reached its destination, it will stop, even when, in fact, the "
"error is not yet 0. Perhaps the motor is no longer being supplied enough "
"power to move. Well, given enough time, the integral term will increase "
"the output (in this case, motor power), causing movement towards the "
"destination."
msgstr ""

#: ../../source/docs/software/control-loops.rst:63
msgid ""
"To explain without calculus, the integral term essentially sums the error"
" over a specific interval of time. To do this, error in each loop "
"iteration is added to a variable (in this case, :math:`I(t)`)."
msgstr ""

#: ../../source/docs/software/control-loops.rst:65
msgid ""
"However, summing error this way has an unfortunate side effect: the "
"longer the loop takes to complete one iteration, the more slowly this sum"
" increases, which is obviously not desirable, as we don’t want lag to "
"affect how the robot moves. To compensate for this, before the error is "
"added to :math:`I(t)`, it is multiplied by how long the previous loop "
"took to-complete, or :math:`t_{n+1}-t_n`, preventing lag from making the "
"system sum more slowly."
msgstr ""

#: ../../source/docs/software/control-loops.rst:67
msgid ""
"So say the robot stops short of the target. The P and D combination "
"aren’t strong enough to move it forward to the destination. You can "
"either tune :math:`K_p` and :math:`K_d` to compensate (**this is "
"recommended**), or you can add the integral term to increase output "
"(**this works too, but requires more attention and tuning to achieve the "
"same result**)."
msgstr ""

#: ../../source/docs/software/control-loops.rst:70
msgid "PID Pseudocode"
msgstr ""

#: ../../source/docs/software/control-loops.rst:95
msgid "Tuning a PID Loop"
msgstr ""

#: ../../source/docs/software/control-loops.rst:97
msgid ""
"The most important thing to know while tuning a PID loop is how each of "
"the terms affects the output. This can allow you to see which gains need "
"to be adjusted."
msgstr ""

#: ../../source/docs/software/control-loops.rst:99
msgid ""
"For example, if the target is not reached but instead the setpoint begins"
" to oscillate around the target, it means there is not enough D gain. If "
"the target is eventually reached, albeit very slowly, that means there is"
" not enough P gain or the D gain is too high."
msgstr ""

#: ../../source/docs/software/control-loops.rst:101
msgid ""
"In brief, the P variable drives the error towards zero, the I variable "
"corrects for steady state error, and the D variable dampens the effects "
"of the P variable, more so as error approaches zero, which prevents "
"overshoot."
msgstr ""

#: ../../source/docs/software/control-loops.rst:103
msgid "The most common method for tuning a PID controller is as follows:"
msgstr ""

#: ../../source/docs/software/control-loops.rst:105
msgid "Set the I and D gains to zero"
msgstr ""

#: ../../source/docs/software/control-loops.rst:106
msgid "Increase the P gain until there are oscillations around the target"
msgstr ""

#: ../../source/docs/software/control-loops.rst:107
msgid "Increase the D gain until no overshoot occurs"
msgstr ""

#: ../../source/docs/software/control-loops.rst:108
msgid "If there is steady state error, increase the I gain until it is corrected"
msgstr ""

#: ../../source/docs/software/control-loops.rst:110
msgid ""
"An important thing to note is that most systems do not need both I and D "
"control. Generally, systems without a lot of friction do not need an I "
"term, but will need more D control. Systems with a lot of friction, on "
"the other hand, generally do not need D control because the friction "
"facilitates deceleration but need I control because the friction prevents"
" the system from reaching the target otherwise."
msgstr ""

#: ../../source/docs/software/control-loops.rst:112
msgid ""
"For a more in-depth explanation, `click here "
"<https://blog.wesleyac.com/posts/intro-to-control-part-two-pid-tuning>`_"
msgstr ""

#: ../../source/docs/software/control-loops.rst:115
msgid "Feedforward Control"
msgstr ""

#: ../../source/docs/software/control-loops.rst:117
msgid ""
"One less popular but equally useful control loop is the feedforward "
"controller (sometimes unofficially referred to in FTC as the PVA "
"controller, or Position-Velocity-Acceleration controller). For those "
"without a physics background, velocity is the speed and direction "
"something is moving and acceleration is how fast velocity is increasing "
"or decreasing."
msgstr ""

#: ../../source/docs/software/control-loops.rst:119
msgid ""
"Unlike PID, feedforward controllers require you to input not only where "
"you want to go and where you are, but how fast you want to be moving at "
"all times. Unlike feedback control loops such as PID, feedforward control"
" loops don’t require information about the variable you want to control. "
"Instead of controlling a variable directly, it controls how fast that "
"variable changes."
msgstr ""

#: ../../source/docs/software/control-loops.rst:121
msgid ""
"Conceptually, the controller is made up of 2 separate P controllers "
"(remember, a P controller is made up of just the proportional term of a "
"PID loop). Each of these P controllers are added together to create a "
"feedforward controller."
msgstr ""

#: ../../source/docs/software/control-loops.rst:123
msgid ""
"Just like we did with the PID formula, we can define the function like "
"this: :math:`f(t)=K_v*V(t)+K_a*A(t)`."
msgstr ""

#: ../../source/docs/software/control-loops.rst:125
msgid ""
"In most FTC applications, :math:`f(t)` controls the position of the "
"output. As the name PVA suggests, the first term relates to velocity, and"
" the second relates to acceleration. Just like in a P controller, each "
"term contains a constant multiplied by an error term (in this case, "
":math:`V(t)` and :math:`A(t)`). However, unlike a PID controller, each "
"term has their own setpoints and endpoints, meaning error is calculated "
"differently for each term."
msgstr ""

#: ../../source/docs/software/control-loops.rst:127
msgid ""
"Unlike desired position, your desired velocity is likely to change "
"throughout the control loop. After all, the entire point of using control"
" loops are to try to create a balance of speed and control of a system. "
"Remember, in most situations, you want to approach your destination "
"quickly if you are far away and slow down if you are close for more "
"control."
msgstr ""

#: ../../source/docs/software/control-loops.rst:129
msgid ""
"For the sake of example, let’s say :math:`v(t)` is a magic function that "
"could tell you exactly how fast you should be going at any point. To "
"calculate velocity error, subtract your current velocity from the magic "
"function :math:`v(t)`. This magic function can also be used to create "
"another magic function: :math:`a(t)`. This magic function tells you how "
"exactly how fast the velocity should change in order to get to the next "
"magic velocity at any specified time."
msgstr ""

#: ../../source/docs/software/control-loops.rst:131
msgid ""
"The last step is finding the magic functions :math:`v(t)` and "
":math:`a(t)`, **which can be obtained using motion profiles** (discussed "
"next)."
msgstr ""

#: ../../source/docs/software/control-loops.rst:134
msgid "Feedforward Pseudocode"
msgstr ""

#: ../../source/docs/software/control-loops.rst:156
msgid "Motion Profiles"
msgstr ""

#: ../../source/docs/software/control-loops.rst:158
msgid ""
"Motion profiling is a technique popularized in FRC\\ |reg| that is "
"starting to find its way to FTC. A motion profile is a function used to "
"change the speed of a power transmission system in a controlled and "
"consistent way by changing desired speed gradually rather than "
"instantaneously."
msgstr ""

#: ../../source/docs/software/control-loops.rst:160
msgid ""
"Let’s illustrate this with an example: say you want your drivetrain, "
"which is initially unmoving, to drive forward at full speed. Ordinarily, "
"you would set all drivetrain motors to full power in the code. However, "
"this can be problematic because even though you tell the motors to move "
"at full speed instantaneously, the drivetrain takes time to get to full "
"speed. This can lead to uncontrolled movements which have the potential "
"to make autonomous less consistent and, perhaps more importantly, damage "
"mechanisms."
msgstr ""

#: ../../source/docs/software/control-loops.rst:162
msgid "Motion profiling attempts to solve this issue."
msgstr ""

#: ../../source/docs/software/control-loops.rst:165
msgid "Advantages"
msgstr ""

#: ../../source/docs/software/control-loops.rst:167
msgid "More controlled and predictable movements"
msgstr ""

#: ../../source/docs/software/control-loops.rst:168
msgid "Reduces rapid change of applied motor voltage"
msgstr ""

#: ../../source/docs/software/control-loops.rst:171
msgid "Disadvantages"
msgstr ""

#: ../../source/docs/software/control-loops.rst:173
msgid "Can be slower"
msgstr ""

#: ../../source/docs/software/control-loops.rst:175
msgid ""
"There are two main types of motion profiles: **Trapezoidal** profiles and"
" **S-Curve** profiles. Trapezoidal profiles accelerate the system at a "
"constant rate, and S-Curve profiles assume jerk (the speed acceleration "
"changes) is constant. Given that S-Curve profiles are not optimal for "
"controlling 2d trajectories (such as driving) and exist to reduce "
"slippage (which usually only occurs when driving in FTC), trapezoidal "
"profiles are recommended for most FTC applications."
msgstr ""

#: ../../source/docs/software/control-loops.rst:177
msgid ""
"Trapezoidal profiles get their name from the shape of the graph of "
"velocity over time:"
msgstr ""

#: ../../source/docs/software/control-loops.rst:182
msgid ""
"These are the “magic functions” for velocity and acceleration over time "
"alluded to in the feedforward section."
msgstr ""

#: ../../source/docs/software/control-loops.rst:184
msgid "Here is some pseudocode for a trapezoidal profile:"
msgstr ""

