# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By
# //Copperforge
# This file is distributed under the same license as the Game Manual 0
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0.1.1-269-g028ca04\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-03 23:20-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/docs/software/finite-state-machines.rst:2
msgid "Finite State Machines"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:4
msgid ""
"Finite State Machines (FSM) are often used while programming in order to "
"allow for more complex series of actions. This is especially useful when "
"one needs multiple tasks to run at the same time, because it allows for "
"tasks to depend on each other's execution in a non-linear fashion."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:7
msgid "What is a Finite State Machine?"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:9
msgid ""
"The name of a finite state machine is very descriptive; it's a state "
"machine, with a finite number of states. It can be in one state at a "
"time, and can transition to a different state once something happens. For"
" example, see the example of a finite state machine that's on `Wikipedia "
"<https://en.wikipedia.org/wiki/Finite-state_machine#Example:_coin-"
"operated_turnstile>`__ because a turnstile is a great example, and it is "
"explained very well."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:12
msgid "Implementation"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:15
msgid "Naive Implementation"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:17
msgid ""
"When first learning about FSMs, it is quite common for programmers to try"
" and use them. Often times, they try to apply an FSM to their autonomous "
"programs by segmenting their autonomous into a giant ``switch`` "
"statement, and it often looks something like this:"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:54
msgid ""
"This however does not really have any benefits compared to if the "
"programmer had simply put each of the code's segments into functions, and"
" executed them in order. In fact, often times, programmers will structure"
" their code like this instead of splitting their code up into functions. "
"The result is an autonomous that's more difficult to debug, and "
"ultimately harder to fix on the fly during a competition or other time "
"crunch."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:56
msgid ""
"If one drew out the state transition diagram for each of the states, for "
"the autonomus above it'd be very linear, and the state transitions always"
" occur because the section of the code finished:"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:79
msgid ""
"In fact, in many implementations, making state transitions for any other "
"reason is often difficult because the code executes linearly and is only "
"in a loop to rerun the switch statements. (Often times, this means the "
"code has a hard time reacting to a stop request in the middle of "
"autonomous.)"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:81
msgid ""
"It is unadvisable to write code like this. If your autonomous is "
"synchronous, it is preferable to split your code up into functions and "
"run them in order, as this will be easier to understand and edit on the "
"fly."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:84
msgid "Useful Implementation"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:86
msgid ""
"FSMs are the right tool to use when a robot needs to complete multiple "
"tasks at once; a common example of this is when a robot should have "
"automation in teleop, but still have control over the drivetrain."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:88
msgid ""
"Often times, teams have issues because their teleop executes in a loop "
"and their servo logic has sleeps in it. But, we can avoid this if we "
"write code in an **asynchronous** fashion - where instead of waiting for "
"a task to complete before doing the next one, tasks are performed at the "
"same time, and each task's state is checked without stopping the other "
"tasks from executing."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:90
msgid ""
"An example of this would be that if one had a robot similar to `Gluten "
"Free's Rover Ruckus Robot "
"<https://www.youtube.com/watch?v=NQvhvYJXVMA>`__, and one wanted to "
"automate the scoring lift so that the drivers don't have to think while "
"the bot deposits the minerals. There are two parts of the bot that are "
"relevant to us in this exercise: the angled scoring lift, and the servo "
"that tips the dumper so the minerals fall out. The goal is to be able to "
"push a button, and then the bot will:"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:92
msgid "extend the lift,"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:93
msgid ""
"at full lift extension, angle the mineral bucket servo to deposit the "
"minerals,"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:94
msgid "wait for the minerals to fall out,"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:95
msgid "reset the servo to the original position"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:96
msgid "retract the lift"
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:98
msgid ""
"If the drivers press a specific other button, we will stop executing the "
"actions above as a failsafe - in case the robot is breaking somehow and "
"the drivers need to take manual control. All the while, the drivers "
"should still be able to control our drivetrain so we can make "
"adjustments. Now, of course, this is a bit simplified (and probably not "
"entirely what GF did), but it will do for now."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:100
msgid ""
"Before anything is programmed, it may be useful draw out the state "
"diagram for this to get a better understanding of what we the robot "
"should actually be doing. This can also add to a :term:`Control Award` "
"submission."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:118
msgid ""
"Notice how resetting the dump servo and retracting the lift share a "
"state. That's because the robot doesn't need to wait for the servo to "
"reset before moving the lift down; they can both happen at once."
msgstr ""

#: ../../source/docs/software/finite-state-machines.rst:120
msgid ""
"Now, let's get into actually implementing the code for this. In a "
"traditional ``OpMode``, which is commonly used for teleop, code runs "
"repeatedly in a ``loop()`` function, so instead of waiting for a state "
"transition to happen directly, the code will repeatedly check on each "
"``loop()`` call if it should perform a state transition. This kind of "
"“update our state” pattern keeps code from blocking the rest of the "
"``loop()`` code from running, such as the drivetrain."
msgstr ""

