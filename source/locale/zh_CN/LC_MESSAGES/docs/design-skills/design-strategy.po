# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By
# //Copperforge
# This file is distributed under the same license as the Game Manual 0
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0.1.1-269-g028ca04\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-03 23:20-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/docs/design-skills/design-strategy.rst:2
msgid "Design Strategy"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:5
msgid "General Design Tips and Mistakes"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:7
msgid ""
"Here are some good tips for teams to make decisions in the high-level "
"design and strategic planning stages."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:10
msgid "Problem"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:10
msgid "Solution"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:12
msgid "**Do everything at once**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:14
msgid "Robot becomes half-baked"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:15
msgid "Cannot excel in one area"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:12
msgid "**Perfect one objective first**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:14
msgid "Robot is highly optimized"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:15
msgid "Consistently excels in one area"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:17
msgid "**Overcomplicate**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:19
msgid "More time needed to iterate"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:20
msgid "Less reliable"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:17
msgid "**Simplify**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:19
msgid "Best designs are usually simplest"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:20
msgid "Less moving parts"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:22
msgid "**Score-first design**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:24
msgid "Neglect proper principles"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:25
msgid "Often wildly inconsistent"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:22
msgid "**Design for consistency**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:24
msgid "Usually reliability > scoring ability"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:25
msgid "Great plus for alliance selection"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:27
msgid "**Build haphazardly**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:29
msgid "Build with subpar materials"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:30
msgid "Inadequate support structure"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:27
msgid "**Build for reliability**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:29
msgid "Remove unneeded moving parts"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:30
msgid "Eliminate single points of failure"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:32
msgid "**Fret about design**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:34
msgid "Wastes testing time"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:35
msgid "Design alone is not enough"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:32
msgid "**Focus on execution**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:34
msgid "Make a decision, then stick to it"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:35
msgid "Execution often beats design"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:39
msgid "Doing Everything At Once to → Perfecting One Objective First"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:41
msgid "**Consistency is king.**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:43
msgid ""
"A common pitfall for first year teams is trying to accomplish all the "
"game objectives at once, especially in tele-op and endgame."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:45
msgid ""
"**This is highly discouraged** because oftentimes new teams do not have "
"the experience to do so. It is no small achievement to have a consistent "
"robot that completes all objectives in competition, even at the higher "
"levels."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:47
msgid ""
"Too often, we see teams bring half-baked robots that will attempt to do "
"everything in a match, but excel at nothing. Even if they succeed, it is "
"often by thin margins and cannot be repeated. This robot could be much "
"more successful if the team spent their time to perfect one mechanism "
"first."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:49
msgid ""
"Teams should always remember the principle that a robot that can complete"
" one thing consistently will likely be more competitive than the robot "
"that does everything inconsistently. We recommend teams focus on one "
"objective during tele-op/endgame and perfect it."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:51
msgid ""
"Typically, teams which have a solid autonomous and consistent endgame can"
" be competitive at the Qualifier level. This is a recommended goal for "
"new teams."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:54
msgid "Overcomplex → Simple"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:56
msgid ""
"Another common trap that teams fall into is to overcomplicate needlessly."
" Simplifying your robot simplifies possible headaches later."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:58
msgid ""
"While some robots are very complicated, keep in mind that those teams are"
" generally experienced, have some sort of machining capability, and fully"
" design their robot in CAD. However, many world-class teams often build "
"designs that are ingenious yet ridiculously simple."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:60
msgid ""
"Some advantages to simplicity are that the robot has less points of "
"failure, given that the robot has less moving parts. Additionally, it "
"takes much less time to iterate through and perfect a simple mechanism as"
" opposed to a complicated one. The reasoning is that a complicated system"
" has many more variables that need to be adjusted/could cause problems."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:62
msgid ""
"Keeping things simple can be practically achieved through a couple of "
"ways."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:64
msgid ""
"Limit the degrees of motion that the mechanism operates in. For example, "
"a linear slide goes in and out in a straight line, as opposed to an arm, "
"which rotates along an axis. Doing so will serve to eliminate forces that"
" otherwise could adversely affect the mechanism."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:66
msgid ""
"Another way to simplify is to build for the shortest travel distance. "
"Obviously, the shortest distance from A to B is in a straight line, so "
"teams should strive to keep the game elements approximately within a "
"reasonably straight line. This can help in solving possible problems if "
"the game elements need to change direction too many times."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:69
msgid "Score-first Designing → Designing for Consistency"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:71
msgid "Teams should prioritize consistency over scoring ability."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:73
msgid ""
"The tortoise beats the rabbit. An overused parable, but it still holds a "
"kernel of truth. Why? Because the tortoise, which plodded along "
"consistently, beat the rabbit, which had hot and cold streaks."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:75
msgid ""
"A hallmark of any successful team is consistency and reliability "
"throughout the competition season and even across seasons. Sports "
"dynasties are dynasties for the reason that they compete at a high level "
"not for a couple games, but for multiple seasons. Without the power of "
"consistency, it will be nearly impossible to win games, let alone a "
"tournament."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:77
msgid ""
"Too many teams fall into the pit of prioritizing scoring ability more "
"than anything else, which is a grave error. In keeping with the first "
"tip, to perfect one objective first, this practice will serve to increase"
" consistency."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:79
msgid ""
"While scoring ability should be a priority and objective when designing "
"mechanisms, it is not everything in this game. We advise being consistent"
" at low and medium scoring levels than inconsistently scoring at a high "
"level."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:81
msgid ""
"Focus on being able to do that one thing every single time throughout "
"your matches, and you will begin to see how important consistency is. "
"**This tip is equally as important during alliance selections. Top teams "
"will prioritize teams that are consistent far more than scoring "
"ability.** They are not afraid to look at teams who can’t score much, but"
" can contribute every time to the alliance score, rather than selecting a"
" boom-or-bust pick."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:84
msgid "Building haphazardly → Building for reliability"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:86
msgid ""
"Build for the worst case scenario, not the best case scenario. When "
"building, teams often overlook a key principle: build for reliability. "
"All too often, teams skimp on the quality of construction as well as "
"materials, which leads to one of the most common reasons for unsuccessful"
" tournaments: part failure."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:88
msgid ""
"Teams also do not take into account the rigors of competition and build "
"as if the robot will not encounter opposing robots. Sufficient driver "
"practice will be able to better simulate in-game conditions and test the "
"reliability of the robot. To remedy this problem, refer to the "
":doc:`Materials Guide </docs/custom-manufacturing/materials-guide>` to "
"gain a better understanding of what materials are recommended for use."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:90
msgid ""
"If possible, teams should build with redundancy in mind. For example, if "
"one set of linear slides fails due to a wire snapping, having a second "
"set will still allow the robot to operate instead of sitting dead in the "
"water. Practically, doubling mechanisms, motors, and servos is a common "
"method to build for redundancy."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:92
msgid ""
"In addition, teams often forget to account for twisting or compression "
"forces that may occur upon the mechanism."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:94
msgid ""
"While we cannot give any specific recommendations, do keep in mind what "
"forces the support structure of your mechanism must bear along the full "
"range of motion, and account for what occurs when it might hit another "
"robot/field wall/field. Building more robustly is always worth the time "
"spent. However, it is good to think about the extra weight that results."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:96
msgid ""
"Furthermore, a common cause of robot disconnect is wiring issues. Refer "
"to the :doc:`Wiring section </docs/power-and-electronics/wiring>` for "
"more information; in short, make sure to plan ahead and leave space for "
"wires, and use strain relief whenever possible."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:98
msgid ""
"All these tips combined will help your robot become more reliable, a key "
"characteristic of all world-level robots."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:101
msgid "Fretting about Design → Focusing on Execution"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:103
msgid "A good execution of a bad design will beat a bad execution of good design."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:105
msgid ""
"FTC is all about how well you execute in both the mechanical aspect and "
"the driver aspect. If your goal is winning, then how mechanically "
"beautiful your robot is doesn't matter. Your goal is less of impressing "
"the judges but performing the best you possibly can on the field."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:107
msgid ""
"It is very possible to take a bad design, execute it well, and still be "
"competitive at a high level. Even though not many teams are able to do "
"so, it still goes to show that the method of implementation is very "
"important. When brainstorming designs, try not to get hung up on small "
"details if possible."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:109
msgid ""
"It is important to discuss different designs and debate the pros & cons, "
"but after a design has been picked, stay with it unless there are major "
"flaws that were originally overlooked. Changing designs will throw away "
"the time spent on the original design, when teams could have kept "
"improving it or practiced more. It is possible to rebuild your robot mid-"
"season, and many top teams have done so to great success."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:111
msgid ""
"However, this is not recommended for rookie and new teams due to the "
"general lack of experience. Realistically, expect to spend 50-100+ hours "
"to rebuild a robot from the ground up. Focus on how you can iterate your "
"current design to be as effective, efficient, and refined as possible."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:114
msgid "Competition Tips and Mistakes"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:116
msgid ""
"Here are some good tips for teams to make decisions in the execution "
"stage."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:119
msgid "**Problem**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:119
msgid "**Solution**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:121
msgid "**Neglect drive practice**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:123
msgid "Drivers unfamiliar with robot"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:124
msgid "Robot reliability untested"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:121
msgid "**Constant driver training**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:123
msgid "Drivers comfortable with controls"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:124
msgid "Proven and tested robot"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:126
msgid "**No game strategy**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:128
msgid "Lack of contingency plans"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:129
msgid "Weakens alliance strength"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:126
msgid "**Strategical driving**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:128
msgid "Only purposeful actions taken"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:129
msgid "Efficient and effective driving"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:131
msgid "**Fully driver-controlled**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:133
msgid "Less efficient"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:134
msgid "Requires more practice"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:131
msgid "**Partially automated tasks**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:133
msgid "Relieves stress on driver"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:134
msgid "Removes human error"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:138
msgid "Neglecting driver practice → Constant driver training"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:140
msgid ""
"A persistent problem with new teams is neglecting driver practice. Drive "
"practice is to be done throughout the season, **not the week before "
"competition.**"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:142
#, python-format
msgid ""
"No matter how good your robot is, the robot is only 50% of the equation. "
"The driver(s) are the other 50% which determine the success of the team "
"as a whole. Even if your robot is the best in the world, an inferior "
"robot with a competent drive team more than likely will beat your robot "
"with a poor drive team. By April's world championships, most top teams "
"have run hundreds of practice matches."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:144
msgid ""
"This gives some obvious advantages compared to a team with lesser "
"practice."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:146
msgid ""
"The driver(s) are totally familiar with handling the robot in every "
"situation."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:148
msgid "The robot is proven to be reliable enough to survive hours of operation."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:149
msgid ""
"The immense data that teams gather from test runs are used to optimize "
"every element of the robot."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:151
msgid ""
"Driver practice not only familiarizes the driver(s) with the robot and "
"serves as a test of robot reliability, it also simulates in-game "
"conditions. **Learning to push the limits of your robot should be done "
"during practice, not at a competition.** This way, drivers will become "
"more comfortable driving under stress and pressure. Teams with intensive "
"driver practice will purposely make things more difficult (such as "
"placing a disabled robot in the middle of the field or unplugging a "
"drivetrain motor)."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:153
msgid ""
"While this may seem extreme, it is really just a form of preparedness. If"
" your driver doesn't know how to react, then you need more drive "
"practice."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:156
msgid "No game strategy → Strategic driving"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:158
msgid ""
"Similar to drive practice, this is something that many inexperienced "
"teams ignore. A sports example is handy - even with the most talented "
"players, a team won’t go far without good game strategy."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:160
msgid ""
"A less capable team with better strategy execution can often pull off an "
"upset. Planning a strategy ensures that every second in the 2:30 game "
"time is used to maximum efficiency, which yields maximum points."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:162
msgid ""
"For example, drivers should know exactly where the robot needs to be "
"positioned after the autonomous to tele-op switch. Practicing this switch"
" will save a couple of seconds when drivers have to think “what do I do "
"now?” In very competitive matches, these few seconds may be able to gain "
"your team an extra cycle. Knowing when to transition from a tele-op to "
"endgame objective is equally important (hint: perfect one first) and will"
" save valuable time. Strategy should **always be used to maximize "
"points** - whether this is a positioning strategy to access the game "
"elements, or a defensive strategy to hinder the other alliance from "
"scoring."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:164
msgid ""
"In most seasons, denying the other alliance 10 points is the same value "
"as scoring 10 points in every match; however, in the Ultimate Goal season"
" there is no advantage to denying the other alliance 10 points, as "
"ranking is based on the number of points your alliance scores as opposed "
"to how many wins you have. However, denying the other alliance points is "
"still a powerful strategy in elimination matches."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:166
msgid ""
"**However, it is not advisable for rookie teams to play defense** due to "
"the specific rules surrounding this strategy. If a team wishes to execute"
" a defensive strategy, be sure to read all the rules as defense can "
"easily incur penalties/cards if done improperly."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:169
msgid "Fully driver-controlled driving → Partially automated tasks"
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:171
msgid ""
"Autonomous should not be limited to only the autonomous mode. Automating "
"simple tasks can be a real time-saver and efficiency boost to teams."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:173
msgid ""
"Automating tasks can save time and reduce the need for driver multi-"
"tasking. Drivers should always be controlling the robot with as few "
"button presses as possible. For example, automatically stopping the "
"intake mechanism when game elements have been collected saves a button "
"press."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:174
msgid ""
"Autonomously operating some mechanisms has the advantage of eliminating "
"driver error and relieves stress. For example, if a lift has to extend to"
" exactly 30 inches, a motor with an :term:`encoder <Encoder>` can "
"complete that with 100% accuracy at full speed, compared to a human "
"driver's minor error."
msgstr ""

#: ../../source/docs/design-skills/design-strategy.rst:176
msgid ""
"Autonomous functions should be able to be overrided by manual input in "
"case something goes wrong (e.g. encoder is unplugged, a part breaks, "
"etc.) to prevent damage to the robot and to be compliant with game rules."
msgstr ""

